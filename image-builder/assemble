#!/bin/bash

set -x

set -eo pipefail

# Define some common functions to use later.

require() {
    if [ ! -d /opt/app-root/packages/$1 ]; then
        .s2i/packages/$1/assemble

        . /opt/app-root/packages/$1/activate
    fi
}

# Move files from where S2I injects them to src directory for building.

echo "Moving source files into place."

(shopt -s dotglob; mv /tmp/src/* ./)

# Fail if no packages have been injected into the container via the S2I
# process.

echo "Checking if runtime packages exist."

if [ ! -d .s2i/packages ]; then
    echo "ERROR: No runtime packages have been provided." 
    exit 1
fi

# Determine default Python runtime to use.

if [ x"$PYTHON_RUNTIME" = x"" ]; then
    # If no runtime specified work out if should use Anaconda Python
    # vs normal PSF Python by looking for presence of environment.yml.

    if [ -f environment.yml ]; then
        PYTHON_RUNTIME=conda-4.2
    else
        PYTHON_RUNTIME=python-3.5
    fi
fi

case $PYTHON_RUNTIME in
    python-3.*)
        require $PYTHON_RUNTIME

        pip3 install "notebook==5.2.*" "jupyterhub==0.8.*"

        python3 -m ipykernel install --user

        for kernel in $JUPYTER_KERNELS; do
            case $kernel in
                $PYTHON_RUNTIME)
                    ;;

                python-*)
                    require $kernel

                    xy=`echo $kernel | sed -e 's/python-\(.*\)\.[0-9]*$/\1/'`

                    pip$xy install "ipykernel==4.6.*"

                    python$xy -m ipykernel install --user

                    ;;

                *)
                    echo "ERROR: Whoops, not sure what to do for this kernel."
                    exit 1
                    ;;
            esac
        done

        if [ -f requirements.txt ]; then
            pip3 install -r requirements.txt
        fi

        ;;

    #conda-*)
    #    ;;

    *)
        echo "ERROR: Whoops, not sure what to do for this runtime."
        exit 1
        ;;
esac

jupyter notebook --generate-config

cat >> $HOME/.jupyter/jupyter_notebook_config.py << EOF
import os
password = os.environ.get('JUPYTER_NOTEBOOK_PASSWORD')
if password:
    import notebook.auth
    c.NotebookApp.password = notebook.auth.passwd(password)
    del password
    del os.environ['JUPYTER_NOTEBOOK_PASSWORD']
EOF

# Remove runtime packages which were not required.

rm -rf .s2i/packages

# Fixup permissions.

fix-permissions /opt/app-root
